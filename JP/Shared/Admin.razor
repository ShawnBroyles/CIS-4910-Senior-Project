@inherits LayoutComponentBase

@page "/Admin"

<PageTitle>Admin</PageTitle>

<main>
    <button class="new-user mx-auto" style="margin:auto; position:absolute; top: 100%; right: -11%">New User</button>
    <div class="content">
        <div class="header" style="left: -10%">
            <h1>Manage Users</h1>
        </div>
        <div class="table-responsive-sm tablealign" style="margin:auto; position:absolute; top: 235%; left: -10%">
            <table class="table table-sm table-bordered">
                <tr>
                    <th style="width: 15%;">ID</th>
                    <th style="width: 40%;">Username</th>
                    <th style="width: 40%;">Password</th>
                    <th style="width: 10%;">Edit</th>
                    <th style="width: 10%;">Delete</th>
                </tr>
                @foreach (account acc in database.GetAccounts())
                {
                    <tr>
                        <td>@acc.id</td>
                        <td>@acc.username</td>
                        <td>@acc.password</td>
                        <td>
                            <button class="edit-user">Edit</button>
                        </td>
                        <td>
                            <button class="delete-user">Delete</button>
                        </td>
                    </tr>
                }
            </table>
            <br />
            <br />
            <div>
                <div style="display:none">@filePath</div>
            </div>
            <div>
                <table>
                    <tr>
                        <th>Audit Log - Importing New Leads</th>
                    </tr>
                    @foreach(auditLogEntry newLead in database.GetAuditLogEntries())
                    {
                        <tr>
                            <td>@newLead.entry</td>
                        </tr>
                    }
                </table>
                <br />
                <br />
            </div>
        </div>
    </div>
</main>

@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime;
@code
{
    private System.Threading.ManualResetEvent Trigger = new System.Threading.ManualResetEvent(false);
    private string filePath = System.IO.Directory.GetCurrentDirectory();

    protected override async Task OnInitializedAsync()
    {
        string username = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "cookieLoggedInUserName");
        if (username == "Admin")
        {
            ImportNewLeads();
        }
    }

    private async Task ImportNewLeads()
    {
        // Download CSV file from Google Forms
        string url = @"https://docs.google.com/spreadsheets/d/e/2PACX-1vSYvFPiq8ADTswNMOfe9OEwBTgazcnsE48OEl1kRv9FvCqYvWLB-zrXySdkIioYmSFkzWItYhKqmoIM/pub?output=csv";
        string saveFileName = "NewLeads.csv";
        new System.Net.WebClient().DownloadFile(url, saveFileName);

        // Determining the line to start reading from so we can avoid duplicate data
        string fileLineNumber = "LineNumber.txt";

        // Creating file if it does not exist
        if (!File.Exists(fileLineNumber))
        {
            using (StreamWriter sw = File.AppendText(fileLineNumber))
            {
                // Default line to read next is line 2 since line 1 has the headers
                sw.WriteLine('2');
                sw.Close();
            }
        }

        // Reading from the file
        StreamReader sr = new StreamReader(fileLineNumber);
        string line = sr.ReadLine();
        int lineContinue = Convert.ToInt32(line);
        sr.Close();

        // Parsing the CSV file
        using (Microsoft.VisualBasic.FileIO.TextFieldParser parser = new Microsoft.VisualBasic.FileIO.TextFieldParser("./" + saveFileName))
        {
            parser.TextFieldType = Microsoft.VisualBasic.FileIO.FieldType.Delimited;
            parser.SetDelimiters(",");
            string[] fields;
            // Read a line each time we iterate through this loop
            while (!parser.EndOfData)
            {
                if ((int)parser.LineNumber < lineContinue)
                {
                    fields = parser.ReadFields();
                    continue;
                }
                lineContinue = (int)parser.LineNumber + 1;
                System.IO.File.WriteAllText(fileLineNumber, Convert.ToString(lineContinue));

                // Reading fields sequentially
                fields = parser.ReadFields();
                int counter = 0;
                client lead = new client();
                company company = new company();
                int newLeadCounter = 0;
                List<string> newLeadsInfo = new List<string>();
                try
                {
                    foreach (string field in fields)
                    {
                        switch (counter)
                        {
                            // Determining which field we're reading from the row
                            case 0:
                                lead.joinDate = Convert.ToDateTime(field);
                                break;
                            case 1:
                                lead.firstName = Convert.ToString(field);
                                break;
                            case 2:
                                lead.lastName = Convert.ToString(field);
                                break;
                            case 3:
                                lead.email = Convert.ToString(field);
                                break;
                            case 4:
                                lead.phoneNumber = Convert.ToDecimal(field);
                                break;
                            case 5:
                                company.name = Convert.ToString(field);
                                break;
                            case 6:
                                company.revenue = Convert.ToInt32(field);
                                break;
                            case 7:
                                company.employees = Convert.ToInt32(field);
                                break;
                            case 8:
                                string categoryName = Convert.ToString(field);
                                // Using nested ternary statements to find the category ID for the lead's selection
                                company.categoryID = categoryName.IndexOf("Construction") != -1 ? 1 :
                                categoryName.IndexOf("Retail") != -1 ? 2 :
                                categoryName.IndexOf("Professional Services") != -1 ? 3 :
                                categoryName.IndexOf("Personal Services") != -1 ? 4 :
                                categoryName.IndexOf("Business to Business") != -1 ? 5 :
                                categoryName.IndexOf("Restaurants & Quick-Serve Restaurants") != -1 ? 6 :
                                categoryName.IndexOf("Other") != -1 ? 7 : 7;
                                // Insert lead and company into database after the last item
                                lead.employeeID = 6; // New Lead
                                int newCompanyID = database.CreateCompany(company);
                                database.CreateLead(lead, newCompanyID);
                                newLeadsInfo.Add($"{lead.firstName} {lead.lastName} represents \"{company.name}\". Company category = {categoryName}, revenue = {company.revenue}, number of employees = {company.revenue}");
                                newLeadCounter++;
                                break;
                            default:
                                break;
                        }
                        counter++;
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.ToString());
                }

                switch(newLeadCounter)
                {
                    case 1:
                        database.CreateAuditLogEntry("" + DateTime.Now.ToString() + " - " + newLeadCounter.ToString() + " new lead and company were added to the database.");
                        break;
                    default:
                        database.CreateAuditLogEntry("" + DateTime.Now.ToString() + " - " + newLeadCounter.ToString() + " new leads and companies were added to the database.");
                        break;
                }

                foreach (string newLeadInfo in newLeadsInfo)
                {
                    database.CreateAuditLogEntry("            - " + newLeadInfo);
                }
            }
        }

        // Sleep for 1 hour
        await Task.Delay(3600000);

        // Recursion
        await ImportNewLeads();
    }
}