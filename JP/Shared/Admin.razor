@inherits LayoutComponentBase

@page "/Admin"

<PageTitle>Admin</PageTitle>

<main>
    <div class="content">
        <div class="header">
            <h1>Manage Users</h1>
        </div>
        <div class="table-responsive-sm tablealign" style="margin:auto; position:absolute; top: 85px;">
            <div>
                <br />
                <div class="new-user mx-auto">
                    <div class="new-user-text">New User</div>
                </div>
            </div>
            <table class="table table-sm table-bordered">
                <tr>
                    <th>ID</th>
                    <th>Username</th>
                    <th>Password</th>
                    <th>Edit</th>
                    <th>Delete</th>
                </tr>
                @foreach (account acc in database.GetAccounts())
                {
                    <tr>
                        <td>@acc.id</td>
                        <td>@acc.username</td>
                        <td>@acc.password</td>
                        <td>
                            <div class="edit-user mx-auto">
                                <div class="edit-user-text">Edit</div>
                            </div>
                        </td>
                        <td>
                            <div class="delete-user mx-auto">
                                <div class="delete-user-text">Delete</div>
                            </div>
                        </td>
                    </tr>
                }
            </table>
            <div>
                <button @onclick=Start disabled=@Running>Start Importing New Leads</button>
                <button @onclick=Stop disabled=@Paused>Stop Importing New Leads</button>
                <div style="display:none">@filePath</div>
            </div>
            <div>
                <table>
                    <tr>
                        <th>Audit Log - Importing New Leads</th>
                    </tr>
                    <!-- foreach(newLeadsAuditLog newLead in database.GetNewLeadAuditLog())
                    {
                        <tr>
                            <td>@newLead.date - @newLead.information</td>
                        </tr>
                    } -->
                </table>
            </div>
        </div>
    </div>
</main>

@code
{
    private bool Running = false;
    private bool Paused = true;
    private System.Threading.ManualResetEvent Trigger = new System.Threading.ManualResetEvent(false);
    private string filePath = System.IO.Directory.GetCurrentDirectory();

    private async Task Start()
    {
        Running = true;
        Paused = false;

        // Start automatically importing new leads into the system
        ImportNewLeads();
    }

    private async Task Stop()
    {
        Running = false;
        Paused = true;
    }

    private async Task ImportNewLeads()
    {
        // Download CSV file from Google Forms
        string url = @"https://docs.google.com/spreadsheets/d/e/2PACX-1vSsR7-FkWD-Im63Yrm7wRp7u_OGmsU6p4aVJnvM6CzZrP0Hgp7oSVtc5FPj1KEf752jyaSxRrBFU140/pub?output=csv";
        string saveFileName = "NewLeads.csv";
        new System.Net.WebClient().DownloadFile(url, saveFileName);

        // Determining the line to start reading from so we can avoid duplicate data
        string fileLineNumber = "LineNumber.txt";

        // Creating file if it does not exist
        if (!File.Exists(fileLineNumber))
        {
            using (StreamWriter sw = File.AppendText(fileLineNumber))
            {
                sw.WriteLine('1');
                sw.Close();
            }
        }

        // Reading from the file
        StreamReader sr = new StreamReader(fileLineNumber);
        string line = sr.ReadLine();
        int lineContinue = Convert.ToInt32(line);
        sr.Close();


        // Parsing the CSV file
        using (Microsoft.VisualBasic.FileIO.TextFieldParser parser = new Microsoft.VisualBasic.FileIO.TextFieldParser("./" + saveFileName))
        {
            parser.TextFieldType = Microsoft.VisualBasic.FileIO.FieldType.Delimited;
            parser.SetDelimiters(",");
            // Read a line each time we iterate through this loop
            while (!parser.EndOfData)
            {
                if ((int)parser.LineNumber > lineContinue)
                {
                    lineContinue = (int)parser.LineNumber;
                    System.IO.File.WriteAllText(fileLineNumber, Convert.ToString(lineContinue));

                    // Reading fields sequentially
                    string[] fields = parser.ReadFields();
                    int counter = 0;
                    client lead = new client();
                    company company = new company();
                    foreach (string field in fields)
                    {
                        switch (counter)
                        {
                            // Determining which field we're reading from the row
                            case 0:
                                lead.joinDate = Convert.ToDateTime(field);
                                break;
                            case 1:
                                lead.firstName = Convert.ToString(field);
                                break;
                            case 2:
                                lead.lastName = Convert.ToString(field);
                                break;
                            case 3:
                                lead.email = Convert.ToString(field);
                                break;
                            case 4:
                                lead.phoneNumber = Convert.ToInt32(field);
                                break;
                            case 5:
                                company.name = Convert.ToString(field);
                                break;
                            case 6:
                                company.categoryID = Convert.ToInt32(field);
                                break;
                            case 7:
                                company.revenue = Convert.ToInt32(field);
                                break;
                            case 8:
                                company.employees = Convert.ToInt32(field);
                                // Insert lead and company into database after the last item
                                lead.employeeID = 6; // New Lead
                                int newCompanyID = database.CreateCompany(company);
                                database.CreateLead(lead, newCompanyID);
                                break;
                            default:
                                break;
                        }
                        counter++;
                    }
                }

            }
        }

        // Sleep for 1 hour
        Thread.Sleep(3600000);

        // Recursion
        if (Running)
            ImportNewLeads();
    }
}