@using JP.Shared
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

@page "/notes"

<PageTitle>Notes</PageTitle>

<main>
    <button class="new-note mx-auto" style="margin:auto; position:absolute; top: 100%; right: -11%" @onclick ="@(() => ShowCreateNoteForm())">New Note</button>
    <div class="content">
        <div class="header" style="left: -10%">
            <h1>Notes</h1>
        </div>
        <div class="table-responsive-sm tablealign" style="margin:auto; position:absolute; top: 235%; left: -10%">
            <div>
                <form class="form-inline">
                    <div class="form-group col-md-6" style="float:right">
                        <input type="search" id="query" name="q" asp-for="searchTerm" placeholder="Search...">
                    </div>
                </form>
            </div>
            <table class="table table-sm table-bordered">
                <tr>
                    <th>Name & Date</th>
                    <th>Content</th>
                    <th>Category ID</th>
                    <th>Edit</th>
                    <th>Delete</th>
                </tr>
                 @{
                    string uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;
                    string searchTerm = uri.Contains("=") ? NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query.Split("=")[1] : "";
                    foreach (note note in database.GetNotes(0, searchTerm))
                    {
                    <tr>
                        <td>@note.name</td>
                        <td>@note.contents</td>
                        <td>@note.categoryID</td>
                        <td>
                            <button class="edit-note" @onclick="@(() => ShowEditNoteForm(note.id))">Edit</button>
                        </td>
                        <td>
                            <button class="delete-note" @onclick="@(() => ConfirmDeleteNote(note.id))">Delete</button>
                        </td>
                    </tr>
                    }
                }
            </table>
        </div>
    </div>
</main>

@if (showingCreateNoteForm)
{
    
    <CreateNoteForm 
        Note="newNote"
        OnCancel="CancelCreateNote"
        OnSave="SaveCreateNote"/>

}

@if (showingEditNoteForm)
{

    <EditNoteForm 
        Note="editNote"
        OnCancel="CancelEditNote"
        OnSave="SaveEditNote" />

}

@if (showingConfirmDeleteNote) {

    <ConfirmDeleteNote
        OnNo="CancelDeleteNote"
        OnYes="DeleteNote" />

}

@functions{

    note newNote;
    note editNote;
    int deleteNoteID;
    bool showingCreateNoteForm;
    bool showingEditNoteForm;
    bool showingConfirmDeleteNote;

    // DELETE NOTE ---------------------------------------------------------------

    private async Task ConfirmDeleteNote(int id)
    {
        deleteNoteID = id;
        showingConfirmDeleteNote = true;
    }

    // Function to delete notes
    private async Task DeleteNote()
    {
        database.DeleteNote(deleteNoteID);
        showingConfirmDeleteNote = false;
    }

    void CancelDeleteNote()
    {
        showingConfirmDeleteNote = false;
    }

    // CREATE NOTE ---------------------------------------------------------------

    // Function to show create note form
    void ShowCreateNoteForm()
    {
        newNote = new note(0, 3, "", "", 7);
        showingCreateNoteForm = true;
    }

    // Function to cancel note creation
    void CancelCreateNote()
    {
        showingCreateNoteForm = false;
    }

    // Function to save created note
    private async Task SaveCreateNote()
    {
        database.CreateNote(newNote.employeeID, newNote.name, newNote.contents, newNote.categoryID);
        showingCreateNoteForm = false;
    }

    // EDIT NOTE ---------------------------------------------------------------

    // Function to show edit note form
    void ShowEditNoteForm(int id)
    {
        editNote = new note(id, 0, "", "", 7);
        showingEditNoteForm = true;
    }

    // Function to cancel note edit
    void CancelEditNote()
    {
        showingEditNoteForm = false;
    }

    // Function to save editted note
    private async Task SaveEditNote()
    {
        database.EditNote(editNote.id, editNote.name, editNote.contents, editNote.categoryID);
        showingEditNoteForm = false;
    }
}